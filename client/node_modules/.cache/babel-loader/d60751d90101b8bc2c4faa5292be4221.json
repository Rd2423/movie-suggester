{"ast":null,"code":"var _jsxFileName = \"/Users/rayandiouf/Desktop/movie-suggester/client/src/components/movies/Movies.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { saveMovieIds, getSavedMovieIds } from \"../../utils/localStorage\";\nimport { SAVE_MOVIE } from \"../../utils/mutation\";\nimport \"../../index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Movies(props) {\n  _s();\n\n  const [saveMovie, {\n    error\n  }] = useMutation(SAVE_MOVIE);\n  const [savedMovieIds, setSavedMovieIds] = useState([]);\n  const [err, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [results, setResults] = useState(\"\"); // useEffect(() => {\n  //   return () => saveMovieIds(savedMovieIds);\n  // });\n\n  useEffect(() => {\n    fetch(\"https://api.themoviedb.org/3/movie/popular?api_key=1469c0124feb2071e2822b7f4023b656&language=en-US&page=1\").then(res => res.json()).then(data => {\n      // const MovieId = data.results.map((movie) => ({\n      //   movieID: movie.id,\n      // }));\n      // console.log(MovieId);\n      // console.log(data);\n      setResults(data);\n      setIsLoaded(true);\n    }, err => {\n      setIsLoaded(true);\n      setError(err);\n    });\n  }, []); // const handleSaveMovie = async (movieid) => {\n  //   const movieToSave = movieid.results.map((movie) =>({\n  //     movie: movie.id\n  //   }));\n  //   console.log(movieToSave)\n  //   const token = Auth.loggedIn() ? Auth.getToken() : null;\n  //   if(!token){\n  //     return false;\n  //   }\n  //   try {\n  //     const {data} = await saveMovie ({\n  //       variables: {input: movieToSave}\n  //     })\n  //     if (error) {\n  //       throw new Error('something went wrong!');\n  //     }\n  //     setSavedMovieIds([...savedMovieIds, movieToSave.movieid])\n  //   }catch (err) {\n  //     console.error(err);\n  //   }\n  // };\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", err.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popular\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Popular Movies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Movies_section\",\n        children: Auth.loggedIn() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: results.results.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movies\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://image.tmdb.org/t/p/w200\" + item.poster_path\n            }, item.poster_path, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: item.original_title\n            }, item.original_title, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.overview\n            }, item.overview, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: results.results.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movies\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://image.tmdb.org/t/p/w180\" + item.poster_path\n            }, item.poster_path, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: item.original_title\n            }, item.original_title, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.overview\n            }, item.overview, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this))\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n}\n\n_s(Movies, \"QYgWeZWFcSznZ7gYJYW0gmNuYGo=\", false, function () {\n  return [useMutation];\n});\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/Users/rayandiouf/Desktop/movie-suggester/client/src/components/movies/Movies.js"],"names":["React","Auth","useState","useEffect","useMutation","saveMovieIds","getSavedMovieIds","SAVE_MOVIE","Movies","props","saveMovie","error","savedMovieIds","setSavedMovieIds","err","setError","isLoaded","setIsLoaded","results","setResults","fetch","then","res","json","data","message","loggedIn","map","item","poster_path","original_title","overview"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { saveMovieIds, getSavedMovieIds } from \"../../utils/localStorage\";\nimport { SAVE_MOVIE } from \"../../utils/mutation\";\nimport \"../../index.css\";\nfunction Movies(props) {\n  const [saveMovie, { error }] = useMutation(SAVE_MOVIE);\n  const [savedMovieIds, setSavedMovieIds] = useState([]);\n  const [err, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [results, setResults] = useState(\"\");\n  // useEffect(() => {\n  //   return () => saveMovieIds(savedMovieIds);\n  // });\n\n  useEffect(() => {\n    fetch(\n      \"https://api.themoviedb.org/3/movie/popular?api_key=1469c0124feb2071e2822b7f4023b656&language=en-US&page=1\"\n    )\n      .then((res) => res.json())\n      .then(\n        (data) => {\n          // const MovieId = data.results.map((movie) => ({\n          //   movieID: movie.id,\n          // }));\n          // console.log(MovieId);\n          // console.log(data);\n          setResults(data);\n          setIsLoaded(true);\n        },\n\n        (err) => {\n          setIsLoaded(true);\n          setError(err);\n        }\n      );\n  }, []);\n  // const handleSaveMovie = async (movieid) => {\n  //   const movieToSave = movieid.results.map((movie) =>({\n  //     movie: movie.id\n  //   }));\n  //   console.log(movieToSave)\n  //   const token = Auth.loggedIn() ? Auth.getToken() : null;\n  //   if(!token){\n  //     return false;\n  //   }\n  //   try {\n  //     const {data} = await saveMovie ({\n  //       variables: {input: movieToSave}\n  //     })\n  //     if (error) {\n  //       throw new Error('something went wrong!');\n  //     }\n  //     setSavedMovieIds([...savedMovieIds, movieToSave.movieid])\n  //   }catch (err) {\n  //     console.error(err);\n  //   }\n  // };\n\n  if (error) {\n    return <div>Error: {err.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n    <>\n        <div className=\"popular\">\n        <h1>Popular Movies</h1>\n        </div>\n      <div className=\"Movies_section\">\n        {Auth.loggedIn() ? (\n          <>\n            {results.results.map((item) => (\n              <div className=\"movies\">\n                <img\n                  key={item.poster_path}\n                  src={\"https://image.tmdb.org/t/p/w200\" + item.poster_path}\n                />\n                <h3 key={item.original_title}>{item.original_title}</h3>\n                <p key={item.overview}>{item.overview}</p>\n                {/* <button \n                // disabled={savedMovieIds?.some((savedMovieId) => savedMovieId === item.id)}\n                // onClick={() => handleSaveMovie(item.id)}\n                >\n                  \n                  Save\n                </button> */}\n              </div>\n            ))}\n          </>\n        ) : (\n          <>\n            {results.results.map((item) => (\n              <div className=\"movies\">\n                <img\n                  key={item.poster_path}\n                  src={\"https://image.tmdb.org/t/p/w180\" + item.poster_path}\n                />\n                <h3 key={item.original_title}>{item.original_title}</h3>\n                <p key={item.overview}>{item.overview}</p>\n              </div>\n            ))}\n          </>\n        )}\n      </div>\n      </>\n    );\n  }\n}\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}